软件体系结构描述研究->软件体系结构设计研究->基于体系结构的软件开发方法->软件体系机构的评估
问题定义->软件需求->软件体系结构->软件设计->软件实现
常用的体系结构设计方法：制品驱动，用例驱动，模式驱动，领域驱动
Chap 1
    软件重用的定义：是一种由预先构造好的，为重用目的而设计的软件构件来建立或者组装软件系统的过程
    应用者重用：使用可重用构件去建立新软件系统的活动，即用重用构造的视图
    生产者重用：建立，获取或者重新设计可重用构件的活动，即为重用构造的视图
    
    构件是指语义完整，语法正确和有可重用价值的单位软件，是软件重用过程可以明确辨识的系统。
    构件是具有一定的功能，能够独立工作或能同其他构件装配协调工作的程序体
    构件是可重用的，自包含的，独立于具体应用的软件对象模块
    
    构件模型：
      3C模型：概念（concept），内容（Content），语境（Context）
      REBOOT模型：描述函数型或过程型的构件，采用三元组来描述，功能，操作对象，与其他构件的关系
              描述面向对象的软件构件，采用四元组，功能，操作对象，所提供的操作，与其他对象构件之间的关系
      青鸟构件模型：外部接口，内部结构（内部成员以及内部成员之间的关系）
               构件-架构模式
    构件管理：构件描述，构件分类，构件库组织，人员及权限管理和用户意见反馈
    构件模型是对构件本质的抽象描述
    构件分类方法：关键字分类，刻面分类法，超文本组织方法
    
    构件重用过程：检索与提取构件，理解与评价构件，修改构件，将构件组装到新的软件产品
    检索方法：基于关键字的检索，刻面检索，超文本检索，其他检索方法


Chap 2
    软件体系结构={构件，连接件，约束}
    构件是指具有一定功能。可明确辨识的软件单位，并且语义完整，语法正确，有可重用价值
    连接件是用来建立构件间的交互以及支配这些交互规则的体系结构构造模块
    约束描述了体系结构配置和拓扑的要求，确定了体系结构的构件与连接件的连接关系

    软件体系结构的研究意义：1.对系统分析的意义2.对软件开发的意义3、对软件重用的意义4、对系统演化的意义

Chap 3
    软件体系结构风格是描述某一特定应用领域中系统组织方式的惯用模式
    体系结构风格定义一个系统家族，即一个体系结构定义一个词汇表和一组约束。
    词汇表包含一些构件和连接件类型，约束指出系统是如何将这些构件和连接件组合起来的
    软件体系结构风格为大粒度的软件重用提供了可能
    软件体系结构风格四要素：词汇表，配置规则，语义解释原则和定义对基于这种风格的系统所进行的分析
    有原则的使用软件体系风格意义：
      促进设计的复用
      带来显著的代码复用
      便于设计者之间的交流和理解
      支持了互操作性，以便于相关工具的集成
      能够对相关风格做出分析
      能够对特定的风格提供可视化支持
    经典软件体系结构风格：
      管道-过滤器：每个构件有一个输入和输出
        优点：具有良好的隐蔽性和高内聚、低耦合的特点
              支持软件重用
              系统维护和增强系统性能简单
              支持并行执行
        缺点：
              通常导致进程成为批处理的结构
              不适合处理交互的应用
              导致系统性能下降
      数据抽象和面向对象风格：构件是对象（被称为管理者的构件）
        优点：
              设计者可以将一些数据存取操作的问题分解成一些交互的代理程序的集合
        缺点：
              过程调用依赖于对象标识的确定
              不同对象之间的操作关联性弱
      基于事件的隐式调用风格：构件不直接调用一个过程，而是触发或者广播一个或多个事件，构件是一  些模块
        优点：为软件重用提供了强大的支持
              为改进系统带来了方便
        缺点：构件放弃了对系统计算的控制
              数据交换的问题
              很难对系统的正确性进行推理
      层次系统风格：每一层为它的上层提供服务，并作为下层的客户
        优点：
              支持基于抽象程度递增的系统设计
              支持功能增强，功能的改变最多影响相邻的上下层
              支持重用
        缺点：
              并不是每个系统都可以很容易地划分为分层的模式
              很难找到一个合适的，正确的层次抽象方法
      仓库风格和黑板风格：仓库风格：两种构件，一个中央数据结构，一个独立构件的集合，它对中央数据结构进行     操作，黑板体系结构是仓库体系结构的特殊化
            黑板模型由三部分组成：知识源，黑板数据结构，控制器
        优点：便于多客户共享大量数据
        缺点：对黑板数据结构的修改较为困难
              需要一定的同步、加锁机制保证数据结构的完整性和一致性
      模型-视图-控制器（MVC）风格：
          主要处理软件用户界面开发中面临的问题
          优点：
                简化了系统设计，保证了系统的可拓展性
                改变界面不影响应用程序的功能内核，使得系统易于演化开发，可维护性好
                易于改变，甚至可以在运行时改变，提供良好的动态机制
          缺点：
                主要局限在应用软件的用户界面开发领域中
      解释器风格：(虚拟机风格)包含作为执行引擎的状态机和3个存储器（正在被解释的程序，被解释程序的当前状态，执行引擎的当前状态）
          优点：有助于应用程序的可移植性和程序设计语言的跨平台能力，以及对未实现的硬件进行仿真
          缺点：额外的间接层次带来了系统性能的下降
      c2风格：基于消息传递，由构件和连接构件两种元素组成
              构件间发送消息：向上级构件发送请求和向下级构件指示状态的改变
              通过连接件绑定在一起，按照一组规则运作的并行构件网络


      两层C/S结构：数据层，表示层
      三层C/S结构：表示层，功能层，数据层
      异构结构风格：几种不同风格的组合
      B/S C/S混合软件体系结构模型：
        内外有别模型：内部和外部人员不一样
        查改有别模型：查询和改动数据库不一样  
Chap 4  软件体系结构描述
      使用4+1模型描述软件体系结构
      逻辑视图，开发视图，过程视图，物理视图，场景视图
      逻辑视图：当采用，面向对象的设计方法时，逻辑视图即是对象模型
      过程视图：描述系统的并发和同步方面的设计
      物理视图：描述软件到硬件之间的映射关系，反映系统在分布方面的设计
      开发视图：描述软件在开发环境下的静态组织结构

      逻辑视图和开发视图描述系统的静态结构，而过程视图和物理视图描述系统的动态结构


Chap 5 软件体系结构设计
      
      1，抽象原理            ★★
      2，封装原理            ★★
      3，信息隐藏原理        ★★
      4，模块化原理          ★
      5，注意点分离原理      ★
      6，耦合和内聚原理      ★★★(单独说)
      7，接口和实现分离原理  ★★
      8，分而治之原理        ★
      9，层次化原理          ★
      






    
      
    
    