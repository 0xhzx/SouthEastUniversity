reader:#include<
stackPointer:P
product:P ->PC DL
stack:['#', 'DL', 'PC']

reader:#include<
stackPointer:PC
product:PC->HL NL
stack:['#', 'DL', 'NL', 'HL']

reader:#include<
stackPointer:HL
product:HL->#include< Id > H1 
stack:['#', 'DL', 'NL', 'H1', '>', 'Id', '#include<']

reader:#include<
stackPointer:#include<
success!
stack:['#', 'DL', 'NL', 'H1', '>', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'DL', 'NL', 'H1', '>']

reader:>
stackPointer:>
success!
stack:['#', 'DL', 'NL', 'H1']

reader:usingnamespace
stackPointer:H1
product:H1->ε
stack:['#', 'DL', 'NL', 'ε']

reader:usingnamespace
stackPointer:NL
product:NL->usingnamespace Id N1 
stack:['#', 'DL', 'N1', 'Id', 'usingnamespace']

reader:usingnamespace
stackPointer:usingnamespace
success!
stack:['#', 'DL', 'N1', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'DL', 'N1']

reader:int
stackPointer:N1
product:N1->ε
stack:['#', 'DL', 'ε']

reader:int
stackPointer:DL
product:DL->D D0
stack:['#', 'D0', 'D']

reader:int
stackPointer:D
product:D ->T Id Dt
stack:['#', 'D0', 'Dt', 'Id', 'T']

reader:int
stackPointer:T
product:T -> int
stack:['#', 'D0', 'Dt', 'Id', 'int']

reader:int
stackPointer:int
success!
stack:['#', 'D0', 'Dt', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'D0', 'Dt']

reader:(
stackPointer:Dt
product:Dt->Df 
stack:['#', 'D0', 'Df']

reader:(
stackPointer:Df
product:Df->( Pm ) CS
stack:['#', 'D0', 'CS', ')', 'Pm', '(']

reader:(
stackPointer:(
success!
stack:['#', 'D0', 'CS', ')', 'Pm']

reader:int
stackPointer:Pm
product:Pm->PL
stack:['#', 'D0', 'CS', ')', 'PL']

reader:int
stackPointer:PL
product:PL->p P1 
stack:['#', 'D0', 'CS', ')', 'P1', 'p']

reader:int
stackPointer:p
product:p->T Id
stack:['#', 'D0', 'CS', ')', 'P1', 'Id', 'T']

reader:int
stackPointer:T
product:T -> int
stack:['#', 'D0', 'CS', ')', 'P1', 'Id', 'int']

reader:int
stackPointer:int
success!
stack:['#', 'D0', 'CS', ')', 'P1', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'D0', 'CS', ')', 'P1']

reader:,
stackPointer:P1
product:P1->, PL
stack:['#', 'D0', 'CS', ')', 'PL', ',']

reader:,
stackPointer:,
success!
stack:['#', 'D0', 'CS', ')', 'PL']

reader:float
stackPointer:PL
product:PL->p P1 
stack:['#', 'D0', 'CS', ')', 'P1', 'p']

reader:float
stackPointer:p
product:p->T Id
stack:['#', 'D0', 'CS', ')', 'P1', 'Id', 'T']

reader:float
stackPointer:T
product:T -> float
stack:['#', 'D0', 'CS', ')', 'P1', 'Id', 'float']

reader:float
stackPointer:float
success!
stack:['#', 'D0', 'CS', ')', 'P1', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'D0', 'CS', ')', 'P1']

reader:)
stackPointer:P1
product:P1->ε
stack:['#', 'D0', 'CS', ')', 'ε']

reader:)
stackPointer:)
success!
stack:['#', 'D0', 'CS']

reader:{
stackPointer:CS
product:CS->{ Dl SL }
stack:['#', 'D0', '}', 'SL', 'Dl', '{']

reader:{
stackPointer:{
success!
stack:['#', 'D0', '}', 'SL', 'Dl']

reader:void
stackPointer:Dl
product:Dl->T Dl
stack:['#', 'D0', '}', 'SL', 'Dl', 'T']

reader:void
stackPointer:T
product:T -> void
stack:['#', 'D0', '}', 'SL', 'Dl', 'void']

reader:void
stackPointer:void
success!
stack:['#', 'D0', '}', 'SL', 'Dl']

reader:Id
stackPointer:Dl
product:Dl->E
stack:['#', 'D0', '}', 'SL', 'E']

reader:Id
stackPointer:E
product:E->Id = NUM ;
stack:['#', 'D0', '}', 'SL', ';', 'NUM', '=', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'D0', '}', 'SL', ';', 'NUM', '=']

reader:=
stackPointer:=
success!
stack:['#', 'D0', '}', 'SL', ';', 'NUM']

reader:NUM
stackPointer:NUM
success!
stack:['#', 'D0', '}', 'SL', ';']

reader:;
stackPointer:;
success!
stack:['#', 'D0', '}', 'SL']

reader:if
stackPointer:SL
product:SL->S Sp
stack:['#', 'D0', '}', 'Sp', 'S']

reader:if
stackPointer:S
product:S->SS
stack:['#', 'D0', '}', 'Sp', 'SS']

reader:if
stackPointer:SS
product:SS->if ( E ) S S1 
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'E', '(', 'if']

reader:if
stackPointer:if
success!
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'E', '(']

reader:(
stackPointer:(
success!
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'E']

reader:NUM
stackPointer:E
product:E->Es
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es']

reader:NUM
stackPointer:Es
product:Es->Ea Es1
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea']

reader:NUM
stackPointer:Ea
product:Ea-> Eb Ea1 
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'Eb']

reader:NUM
stackPointer:Eb
product:Eb->Ec Eb1
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'Eb1', 'Ec']

reader:NUM
stackPointer:Ec
product:Ec->NUM
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'Eb1', 'NUM']

reader:NUM
stackPointer:NUM
success!
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'Eb1']

reader:+
stackPointer:Eb1
product:Eb1->ε
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'ε']

reader:+
stackPointer:Ea1
product:Ea1->addop Eb Ea1
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'Eb', 'addop']

reader:+
stackPointer:addop
product:addop->+
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'Eb', '+']

reader:+
stackPointer:+
success!
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'Eb']

reader:Id
stackPointer:Eb
product:Eb->Ec Eb1
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'Eb1', 'Ec']

reader:Id
stackPointer:Ec
product:Ec->Id
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'Eb1', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'Eb1']

reader:>=
stackPointer:Eb1
product:Eb1->ε
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'Ea1', 'ε']

reader:>=
stackPointer:Ea1
product:Ea1->ε
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Es1', 'ε']

reader:>=
stackPointer:Es1
product:Es1->relop Ea 
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea', 'relop']

reader:>=
stackPointer:relop
product:relop->>=
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea', '>=']

reader:>=
stackPointer:>=
success!
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea']

reader:Id
stackPointer:Ea
product:Ea-> Eb Ea1 
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea1', 'Eb']

reader:Id
stackPointer:Eb
product:Eb->Ec Eb1
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea1', 'Eb1', 'Ec']

reader:Id
stackPointer:Ec
product:Ec->Id
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea1', 'Eb1', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea1', 'Eb1']

reader:*
stackPointer:Eb1
product:Eb1->mulop Ec Eb1
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea1', 'Eb1', 'Ec', 'mulop']

reader:*
stackPointer:mulop
product:mulop->*
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea1', 'Eb1', 'Ec', '*']

reader:*
stackPointer:*
success!
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea1', 'Eb1', 'Ec']

reader:NUM
stackPointer:Ec
product:Ec->NUM
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea1', 'Eb1', 'NUM']

reader:NUM
stackPointer:NUM
success!
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea1', 'Eb1']

reader:)
stackPointer:Eb1
product:Eb1->ε
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'Ea1', 'ε']

reader:)
stackPointer:Ea1
product:Ea1->ε
stack:['#', 'D0', '}', 'Sp', 'S1', 'S', ')', 'ε']

reader:)
stackPointer:)
success!
stack:['#', 'D0', '}', 'Sp', 'S1', 'S']

reader:Id
stackPointer:S
product:S->ES
stack:['#', 'D0', '}', 'Sp', 'S1', 'ES']

reader:Id
stackPointer:ES
product:ES->E
stack:['#', 'D0', '}', 'Sp', 'S1', 'E']

reader:Id
stackPointer:E
product:E->Id = NUM ;
stack:['#', 'D0', '}', 'Sp', 'S1', ';', 'NUM', '=', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'D0', '}', 'Sp', 'S1', ';', 'NUM', '=']

reader:=
stackPointer:=
success!
stack:['#', 'D0', '}', 'Sp', 'S1', ';', 'NUM']

reader:NUM
stackPointer:NUM
success!
stack:['#', 'D0', '}', 'Sp', 'S1', ';']

reader:;
stackPointer:;
success!
stack:['#', 'D0', '}', 'Sp', 'S1']

reader:else
stackPointer:S1
product:S1->else S
stack:['#', 'D0', '}', 'Sp', 'S', 'else']

reader:else
stackPointer:else
success!
stack:['#', 'D0', '}', 'Sp', 'S']

reader:Id
stackPointer:S
product:S->ES
stack:['#', 'D0', '}', 'Sp', 'ES']

reader:Id
stackPointer:ES
product:ES->E
stack:['#', 'D0', '}', 'Sp', 'E']

reader:Id
stackPointer:E
product:E->Id = NUM ;
stack:['#', 'D0', '}', 'Sp', ';', 'NUM', '=', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'D0', '}', 'Sp', ';', 'NUM', '=']

reader:=
stackPointer:=
success!
stack:['#', 'D0', '}', 'Sp', ';', 'NUM']

reader:NUM
stackPointer:NUM
success!
stack:['#', 'D0', '}', 'Sp', ';']

reader:;
stackPointer:;
success!
stack:['#', 'D0', '}', 'Sp']

reader:return
stackPointer:Sp
product:Sp->SL
stack:['#', 'D0', '}', 'SL']

reader:return
stackPointer:SL
product:SL->S Sp
stack:['#', 'D0', '}', 'Sp', 'S']

reader:return
stackPointer:S
product:S->RS
stack:['#', 'D0', '}', 'Sp', 'RS']

reader:return
stackPointer:RS
product:RS ->return R1
stack:['#', 'D0', '}', 'Sp', 'R1', 'return']

reader:return
stackPointer:return
success!
stack:['#', 'D0', '}', 'Sp', 'R1']

reader:;
stackPointer:R1
product:R1->;
stack:['#', 'D0', '}', 'Sp', ';']

reader:;
stackPointer:;
success!
stack:['#', 'D0', '}', 'Sp']

reader:}
stackPointer:Sp
product:Sp->ε
stack:['#', 'D0', '}', 'ε']

reader:}
stackPointer:}
success!
stack:['#', 'D0']

reader:int
stackPointer:D0
product:D0->DL
stack:['#', 'DL']

reader:int
stackPointer:DL
product:DL->D D0
stack:['#', 'D0', 'D']

reader:int
stackPointer:D
product:D ->T Id Dt
stack:['#', 'D0', 'Dt', 'Id', 'T']

reader:int
stackPointer:T
product:T -> int
stack:['#', 'D0', 'Dt', 'Id', 'int']

reader:int
stackPointer:int
success!
stack:['#', 'D0', 'Dt', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'D0', 'Dt']

reader:(
stackPointer:Dt
product:Dt->Df 
stack:['#', 'D0', 'Df']

reader:(
stackPointer:Df
product:Df->( Pm ) CS
stack:['#', 'D0', 'CS', ')', 'Pm', '(']

reader:(
stackPointer:(
success!
stack:['#', 'D0', 'CS', ')', 'Pm']

reader:)
stackPointer:Pm
product:Pm->ε
stack:['#', 'D0', 'CS', ')', 'ε']

reader:)
stackPointer:)
success!
stack:['#', 'D0', 'CS']

reader:{
stackPointer:CS
product:CS->{ Dl SL }
stack:['#', 'D0', '}', 'SL', 'Dl', '{']

reader:{
stackPointer:{
success!
stack:['#', 'D0', '}', 'SL', 'Dl']

reader:int
stackPointer:Dl
product:Dl->T Dl
stack:['#', 'D0', '}', 'SL', 'Dl', 'T']

reader:int
stackPointer:T
product:T -> int
stack:['#', 'D0', '}', 'SL', 'Dl', 'int']

reader:int
stackPointer:int
success!
stack:['#', 'D0', '}', 'SL', 'Dl']

reader:Id
stackPointer:Dl
product:Dl->E
stack:['#', 'D0', '}', 'SL', 'E']

reader:Id
stackPointer:E
product:E->Id = NUM ;
stack:['#', 'D0', '}', 'SL', ';', 'NUM', '=', 'Id']

reader:Id
stackPointer:Id
success!
stack:['#', 'D0', '}', 'SL', ';', 'NUM', '=']

reader:=
stackPointer:=
success!
stack:['#', 'D0', '}', 'SL', ';', 'NUM']

reader:NUM
stackPointer:NUM
success!
stack:['#', 'D0', '}', 'SL', ';']

reader:;
stackPointer:;
success!
stack:['#', 'D0', '}', 'SL']

reader:return
stackPointer:SL
product:SL->S Sp
stack:['#', 'D0', '}', 'Sp', 'S']

reader:return
stackPointer:S
product:S->RS
stack:['#', 'D0', '}', 'Sp', 'RS']

reader:return
stackPointer:RS
product:RS ->return R1
stack:['#', 'D0', '}', 'Sp', 'R1', 'return']

reader:return
stackPointer:return
success!
stack:['#', 'D0', '}', 'Sp', 'R1']

reader:;
stackPointer:R1
product:R1->;
stack:['#', 'D0', '}', 'Sp', ';']

reader:;
stackPointer:;
success!
stack:['#', 'D0', '}', 'Sp']

reader:}
stackPointer:Sp
product:Sp->ε
stack:['#', 'D0', '}', 'ε']

reader:}
stackPointer:}
success!
stack:['#', 'D0']

reader:#
stackPointer:D0
product:D0->ε
stack:['#', 'ε']

reader:#
stackPointer:#
success!
stack:[]

